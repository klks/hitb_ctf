// bin200_layer1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

//#define CTF_DEBUG 1

//Big Big Buffer with random numbers, this is generated by hexgen.py
unsigned long buffer[] = {	0x8cec6a5d, 0x4e05e3dc, 0xc1027663, 0xb013743, 0x54aafad0, 0xe5a47571, 0xfb10327b, 0x734c020, 0x51761d04, 0x9589dbb1,
							0x2a96b29f, 0xe2e9d65b, 0x16602ea0, 0x4c9c0278, 0x10e94658, 0x36b3792e, 0x216e7a87, 0xbf1f88c1, 0x7e4f9607, 0xe7cbb668,
							0x2cccd26e, 0xe8988459, 0x25c7777a, 0xdd3fa769, 0xd2939cb3, 0x28f5744e, 0xed33bf04, 0x6cc48ffd, 0xb4daa9bd, 0xae794075,
							0x8ab4b29c, 0x37ca8350, 0xbe9246f1, 0x9c437943, 0x2d2fc042, 0x44102dc5, 0x9073eb57, 0x73a6cb1b, 0x5f06375f, 0x10707859,
							0x53361c51, 0x491983a3, 0x9d489041, 0xc89380ad, 0xca103df7, 0xd55328ad, 0xeba34509, 0x147b024b, 0xc508ae17, 0xbcf5b1d7,
							0x6099fe59, 0xf0811d57, 0x5b715669, 0xf755775c, 0xb3799652, 0x82de9311, 0x142628f5, 0x4d8e79fe, 0xec2c13df, 0xf318fd0a,
							0xc2477e06, 0x8a6c2be9, 0x347da1ec, 0x2c849953, 0x128d51cd, 0x6f39098, 0x762aa470, 0x2dfd98e3, 0x4808db20, 0x54c90279,
							0x97e9a87d, 0x6d976729, 0x438e3c35, 0x45724e9a, 0xef2e850b, 0x96c56abb, 0xa3538e5f, 0x54f54d06, 0x607ab562, 0xb204992c,
							0xf929cde5, 0xe3bbf84c, 0x5381f827, 0x5b368060, 0x391a1a20, 0xe3736b25, 0xda81cfd6, 0x31aa0c9f, 0xd7e42b04, 0x26f00a8c,
							0xbbadc276, 0xd8f10578, 0x57a2d442, 0x8db4588a, 0xe4aaa26, 0x58e92823, 0x42d542c4, 0x92dd5af9, 0xaf12adb8, 0x3c3826c3,
							0x6702a9c8, 0xae13a1b2, 0x4b1c7186, 0x5cfa346e,0xc0706068, 0xcbea9c13, 0x3a204509, 0x12bf8ade, 0x9036e2b9, 0x648b66c0,
							0x2b585b25, 0xfd301443, 0xf5ba0063, 0xd02e17f7, 0xae45d294, 0x57b79171, 0xa9c39e0c, 0xd67188e7, 0x963c9e35, 0x9ddb100a,
							0x3ec7fcd6, 0x7f689ef6, 0x815da89a,0x71e429bb, 0x36d3c498, 0x5c2d39e2, 0x3107391, 0xe06c9306, 0x19298cd9, 0x4772fa99,
							0xd748f9a9, 0xbabe0edc, 0xdaa4d9b9, 0x166ca545, 0xc16996e3, 0x94f09407, 0xb3da56dd, 0x6eb90688, 0x4d6d31f4, 0x2464de68,
							0x2cb3ad82, 0x4694c050, 0x891546a0, 0x72a15b27, 0xa8a39613, 0x29a8b997, 0xe4f32397, 0x3e917e9, 0xcc4855f8, 0x36b3508f,
							0x98faff30, 0x559b3a81, 0xeff62908, 0xdae8103b, 0x6a22b750, 0x4a10cd22, 0xab2fbc3e, 0x6adfa40d, 0x353ecce2, 0xe0d3e918,
							0x6d4101c6, 0x87060541, 0x678ae1f5, 0x68134fe8, 0xf86d8593, 0x178cb0f7, 0x36086903, 0xcda081eb, 0xb2496899, 0x76ad606,
							0x37949307, 0xf2de7c87, 0xe2447ef6, 0x79c1edb0, 0x110d571f, 0x5d28ddab, 0x666559e6, 0x35017193, 0x4d7a7e22, 0x9598f379,
							0xffc7dc90, 0x8af20837, 0x983f5550, 0xdec6451a, 0x176eaa48, 0x30193c8f, 0x1d5ceea5, 0x3b56dbd8, 0x3415d16, 0x97ce5fc1,
							0x4be14182,0x1c0b640c, 0xf9cb357e, 0x1557ed8, 0x77b571c, 0x69a35868, 0x4c30b891, 0xc559fafe, 0x85b4111c, 0xaf47d238,
							0x86022914, 0x483e1101, 0x208356c0, 0x5f79b6ba, 0xac69aed7, 0x8acbccba, 0xcbb0f2f5, 0xe3215a05, 0xf15e7218, 0x79c4acc0,
							0xa48e050, 0xef762796, 0x86150c84, 0x1a0af9e8, 0xfd803618, 0xee15d458, 0x19c46c5b, 0xdda7e5df, 0xa335cd0a, 0x7a933f0c,
							0x183ca97d, 0x8ee05beb, 0x63588917, 0x761582b4, 0x88a6d09, 0x56205c85, 0xd8eb3d2a, 0xd9961dc2, 0x12f8c550, 0xf80b57a7,
							0xdb46a56, 0xce8e6486, 0x624a1804, 0x6903204d, 0xa612f89, 0x8379373f, 0xa9ce92c2, 0xb442174b, 0x6fb83c86, 0x9875db0a,
							0x1b84b009, 0x55a15ee1, 0xff8bc606, 0x9ad3b206, 0xd148fec9, 0x8376a1b6, 0x9dc6f8ef, 0x86730ec3, 0x38f508c2, 0xf7264e98,
							0x871f0c2c, 0x7221dcd0, 0x97ae46c7, 0x51b610bd, 0x2ca6e032, 0x9786a43b
						};

//This is generated by the debug function GenerateLookup() which uses the buffer[] array
//Another array with DWORD AABBCCDD, AA = RANDOM UNUSED, BB = Pos in buffer[], CC = byte of pos, DD = bit of byte
unsigned long lookup_table[] = {0x85740207, 0x39ad0107, 0x6c630107, 0xa7ca0306, 0x94b60206, 0xdb170302, 0xc6670202, 0x12770007,
                                0x12e00206, 0x97c70302, 0xb6be0201, 0xb84d0005, 0x9f1e0000, 0x701c0001, 0x954f0202, 0x38260207,
                                0xa3c70001, 0x2f3b0204, 0x022b0000, 0x8cf60103, 0x294c0205, 0x8e320103, 0x03850304, 0x47250100,
                                0xf2190104, 0xf7be0103, 0xaa830304, 0x19640005, 0x5a720007, 0xa4d90301, 0xbb290100, 0xb6890301,
                                0xbd700107, 0x571c0105, 0xd1040204, 0x16e90307, 0x2a7a0102, 0xfd040105, 0x89bd0202, 0xa2070206,
                                0xf9560007, 0xc2c20207, 0x73cc0306, 0xcddd0205, 0xabc10302, 0xd4f20200, 0x802d0204, 0x94ab0300,
                                0xd68c0101, 0xb5ed0207, 0x00b80204, 0x60320203, 0x752d0303, 0x52690204, 0x52d60304, 0xd45c0002,
                                0x23a30202, 0x02810005, 0x148b0206, 0x1e560007, 0x9c660006, 0x42aa0105, 0x2c100301, 0x911d0104,
                                0x75ae0101, 0x3bb10107, 0x141a0305, 0xbd100105, 0x4a720307, 0xc67e0000, 0x560a0301, 0x740a0201,
                                0x11650301, 0x0c980307, 0xadd20202, 0xc6760302, 0xdd090304, 0xa9020000, 0x7c0c0102, 0xc54e0204,
                                0xbca10004, 0x15a80107, 0x64c00201, 0x0c650107, 0xb6710206, 0x073e0307, 0xb6fb0003, 0xf95f0303,
                                0xbedb0306, 0x72cf0102, 0xdbeb0204, 0xd90e0301, 0xeaed0102, 0xf2ca0205, 0xf9da0203, 0xd0480103,
                                0x49b90000, 0xd5400305, 0xfba00301, 0x8b240004, 0x515b0205, 0x09350102, 0xf64b0203, 0x55e20106,
                                0x5f460001, 0x67360306, 0x81c80005, 0x45b00300, 0x70c80006, 0x47d10106, 0xb97a0303, 0xfa720306,
                                0xfa560106, 0x80b00300, 0x3eab0102, 0x30540201, 0x6a870107, 0x1a650003, 0xba9b0001, 0x81b30103,
                                0x67de0302, 0x8e220104, 0xf7da0304, 0x98170006, 0xc2c20305, 0xf3670101, 0x55740005, 0xa4820204,
                                0x96e90005, 0x61530305, 0x11140206, 0xeb850102, 0x2dbf0203, 0x2ea80103, 0x901e0303, 0xf58e0304,
                                0x28b10000, 0x9f8d0006, 0x87980207, 0xd33f0102, 0xe6ac0003, 0xf5fe0201, 0x99a60303, 0x69240303,
                                0x99a80004, 0x99140105, 0xf6170302, 0x13990305, 0xa4620206, 0x36870007, 0x6b400300, 0x39370303,
                                0x09290202, 0x86cb0207, 0x383c0306, 0x96670004, 0x4dce0205, 0xec250003, 0x32950300, 0x72230205,
                                };

int GetBit(unsigned char ucb, int bit)
{
	return ((ucb >> (7-bit)) & 1);
}

unsigned char GetByte(unsigned long dw, int pos)
{
	if(pos == 0)
	{
		return (dw >> 24) & 0xFF;
	}
	else if(pos == 1)
	{
		return (dw >> 16) & 0xFF;
	}
	else if(pos == 2)
	{
		return (dw >> 8) & 0xFF;
	}
	else
	{
		return (dw & 0xFF);
	}
}

#ifdef CTF_DEBUG
void ConvertToBits(char *cFlag)
{
	for(int i=0; i<strlen(cFlag); i++)
	{
		unsigned char uc = cFlag[i];
		for(int j=0; j<8; j++)
		{
			printf("%d", GetBit(uc, j));
		}
		printf("\n");
	}
}

void GenerateLookup(char *cFlag)
{
	printf("unsigned long lookup_table[] = {");
	int flag_len = strlen(cFlag);
	for(int i=0; i<flag_len;i++)
	{
		unsigned char uc = cFlag[i];
		//printf("%c(%d) = ", uc,uc);
		for(int j=0; j<8; j++)
		{
			unsigned long data;
			unsigned char bdata;

			//Fill AA with something random
			DWORD dwV = 0;
			dwV = (rand() % 256) << 24;
			//printf("%X,", dwV);
			
			//Fill position in the buffer with something random in buffer
			int pos = rand() % 256;
			dwV += pos << 16;
			//printf("%X,", dwV);

			data = buffer[pos];

			//Get a random byte to test
			//printf("%d,", pos);
			int rbyte = rand() % 4;
			
			//printf("%X,", dwV);
			
			bdata = GetByte(data, rbyte);
			//printf("%.8X(%.2X),", data,bdata);

			int retBit = GetBit(uc, j);
			//printf("%d ", retBit);

			//Loop till we find a matching bit
			int unstuck_ctr = 0;

			while(1)
			{
				int randbit = rand() % 8;
				if(GetBit(bdata, randbit) == retBit)
				{
					dwV += rbyte << 8;
					dwV += randbit;
					//printf("%X", dwV);
					break;
				}
				unstuck_ctr += 1;
				if(unstuck_ctr == 100)
				{
					int rbyte = rand() % 4;	//Try a different byte
					bdata = GetByte(data, rbyte);
					unstuck_ctr = 0;
				}
			}

			printf("0x%.8x, ", dwV);
			//printf("\n");
		}
		printf("\n\t\t\t\t");
		//printf("\n");
	}
	printf("};");
}
#endif

int _tmain(int argc, _TCHAR* argv[])
{
#ifdef CTF_DEBUG
	srand(time(NULL));
	ConvertToBits("Gym40gvmp6ZTizCm2ec7");
	GenerateLookup("Gym40gvmp6ZTizCm2ec7");
	char cKey = 0;
	int ictr = 0;

	printf("\nsizeof(buffer) = %d, sizeof(lookup_table) = %d\n", sizeof(buffer)/4, sizeof(lookup_table)/4);
	printf("Decoded key = ");
#endif

	unsigned long sum = 0;
	
	for(int i=0;i<sizeof(lookup_table)/4;i++)
	{
		unsigned long entry1 = lookup_table[i];

		unsigned char buffer_pos = GetByte(entry1, 1);
		unsigned char sel_byte = GetByte(entry1, 2);
		unsigned char sel_bit = GetByte(entry1, 3);

		unsigned long buffer_entry = buffer[buffer_pos];
		unsigned char ucb = GetByte(buffer_entry, sel_byte);
		int iBit = GetBit(ucb, sel_bit);

		sum += iBit;

#ifdef CTF_DEBUG
		cKey = (cKey << 1) + iBit;
		//printf ("%d", iBit);
		ictr += 1;
		if(ictr == 8)
		{
			ictr = 0;
			printf("%c", cKey);
			cKey = 0;
		}
#endif
		
	}
#ifdef CTF_DEBUG
	printf("\n");
#endif

	printf("The answer is not %d, look harder!!!!!\n", sum);

	
	return 0;
}

